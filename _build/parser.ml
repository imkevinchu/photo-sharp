type token =
  | DOT
  | SEMI
  | COL
  | SEMICOL
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | PIXKEY
  | IN
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | AND
  | OR
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | BOOL
  | FLOAT
  | VOID
  | STRING
  | IMAGE
  | GRADIENT
  | ALBUM
  | ARR
  | PRESET
  | PIXEL
  | LITERAL of (int)
  | BLIT of (bool)
  | STRLIT of (string)
  | ID of (string)
  | FLIT of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
open Ast
# 55 "parser.ml"
let yytransl_const = [|
  257 (* DOT *);
  258 (* SEMI *);
  259 (* COL *);
  260 (* SEMICOL *);
  261 (* LPAREN *);
  262 (* RPAREN *);
  263 (* LBRACE *);
  264 (* RBRACE *);
  265 (* COMMA *);
  266 (* PLUS *);
  267 (* MINUS *);
  268 (* TIMES *);
  269 (* DIVIDE *);
  270 (* ASSIGN *);
  271 (* PIXKEY *);
  272 (* IN *);
  273 (* NOT *);
  274 (* EQ *);
  275 (* NEQ *);
  276 (* LT *);
  277 (* LEQ *);
  278 (* GT *);
  279 (* GEQ *);
  280 (* AND *);
  281 (* OR *);
  282 (* RETURN *);
  283 (* IF *);
  284 (* ELSE *);
  285 (* FOR *);
  286 (* WHILE *);
  287 (* INT *);
  288 (* BOOL *);
  289 (* FLOAT *);
  290 (* VOID *);
  291 (* STRING *);
  292 (* IMAGE *);
  293 (* GRADIENT *);
  294 (* ALBUM *);
  295 (* ARR *);
  296 (* PRESET *);
  297 (* PIXEL *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  298 (* LITERAL *);
  299 (* BLIT *);
  300 (* STRLIT *);
  301 (* ID *);
  302 (* FLIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\006\000\006\000\009\000\
\009\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\007\000\007\000\003\000\008\000\008\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\012\000\012\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\013\000\013\000\
\014\000\014\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\014\000\000\000\001\000\002\000\
\004\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\000\000\002\000\003\000\000\000\002\000\
\002\000\003\000\002\000\005\000\004\000\007\000\011\000\011\000\
\007\000\007\000\011\000\000\000\001\000\001\000\001\000\001\000\
\001\000\001\000\009\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\002\000\
\002\000\003\000\006\000\004\000\003\000\004\000\000\000\001\000\
\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\067\000\000\000\010\000\011\000\012\000\013\000\
\014\000\015\000\016\000\017\000\018\000\000\000\019\000\001\000\
\003\000\004\000\000\000\000\000\000\000\000\000\022\000\000\000\
\000\000\000\000\000\000\008\000\000\000\000\000\000\000\000\000\
\000\000\009\000\000\000\020\000\000\000\021\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\038\000\040\000\042\000\000\000\039\000\024\000\000\000\000\000\
\023\000\005\000\000\000\000\000\027\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\025\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\026\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\062\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\060\000\000\000\000\000\000\000\
\028\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\059\000\000\000\
\000\000\000\000\000\000\034\000\033\000\000\000\000\000\000\000\
\000\000\043\000\000\000\000\000\000\000\000\000\000\000\000\000\
\031\000\032\000\035\000"

let yydgoto = "\002\000\
\003\000\004\000\017\000\018\000\019\000\026\000\037\000\039\000\
\027\000\054\000\055\000\063\000\093\000\094\000"

let yysindex = "\043\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\246\255\000\000\000\000\
\000\000\000\000\003\255\004\255\059\255\060\255\000\000\246\255\
\025\255\071\255\080\255\000\000\091\255\246\255\093\255\058\255\
\099\255\000\000\109\255\000\000\246\255\000\000\097\255\196\255\
\110\255\113\255\196\255\196\255\009\255\111\255\001\255\112\255\
\000\000\000\000\000\000\008\255\000\000\000\000\142\000\067\000\
\000\000\000\000\117\255\117\255\000\000\077\001\118\255\196\255\
\196\255\105\255\196\255\196\255\196\255\077\255\000\000\196\255\
\196\255\196\255\196\255\196\255\196\255\196\255\196\255\196\255\
\196\255\196\255\196\255\123\255\196\255\102\255\000\000\167\000\
\126\255\205\255\192\000\077\001\127\255\125\255\077\001\130\255\
\063\255\063\255\117\255\117\255\118\002\118\002\046\255\046\255\
\046\255\046\255\104\002\054\002\000\000\217\000\134\255\135\255\
\196\255\196\255\242\000\147\255\000\000\196\255\196\255\196\255\
\000\000\151\255\011\001\092\000\156\255\157\255\077\001\131\255\
\036\001\191\255\196\255\196\255\191\255\191\255\000\000\196\255\
\136\255\159\255\117\000\000\000\000\000\061\001\160\255\164\255\
\165\255\000\000\167\255\170\255\175\255\191\255\191\255\191\255\
\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\174\255\
\000\000\000\000\176\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\144\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\251\255\000\000\000\000\000\000\000\000\
\000\000\000\000\101\001\125\001\000\000\065\255\000\000\000\000\
\158\255\000\000\000\000\177\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\042\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\010\255\000\000\178\255\084\255\000\000\
\197\001\221\001\149\001\173\001\077\002\085\002\245\001\253\001\
\021\002\029\002\006\255\221\255\000\000\000\000\055\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\177\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\012\255\000\000\
\000\000\000\000\179\255\000\000\000\000\000\000\000\000\000\000\
\149\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\144\000\000\000\249\255\000\000\000\000\140\000\
\000\000\002\003\216\255\193\255\080\000\000\000"

let yytablesize = 922
let yytable = "\056\000\
\016\000\089\000\059\000\060\000\062\000\065\000\020\000\054\000\
\054\000\054\000\061\000\054\000\068\000\040\000\054\000\065\000\
\025\000\066\000\065\000\043\000\066\000\069\000\032\000\088\000\
\062\000\044\000\091\000\092\000\095\000\054\000\054\000\097\000\
\098\000\099\000\100\000\101\000\102\000\103\000\104\000\105\000\
\106\000\107\000\108\000\001\000\110\000\066\000\070\000\021\000\
\022\000\115\000\049\000\050\000\051\000\052\000\053\000\072\000\
\073\000\074\000\075\000\029\000\023\000\029\000\029\000\070\000\
\024\000\029\000\037\000\138\000\037\000\028\000\037\000\029\000\
\123\000\124\000\074\000\075\000\029\000\127\000\092\000\129\000\
\029\000\029\000\029\000\029\000\029\000\058\000\058\000\058\000\
\030\000\058\000\062\000\139\000\058\000\031\000\033\000\142\000\
\029\000\029\000\029\000\029\000\029\000\040\000\034\000\041\000\
\042\000\035\000\040\000\043\000\041\000\111\000\036\000\057\000\
\043\000\044\000\058\000\064\000\067\000\070\000\044\000\087\000\
\090\000\096\000\045\000\046\000\109\000\047\000\048\000\045\000\
\046\000\113\000\047\000\048\000\117\000\118\000\119\000\121\000\
\135\000\122\000\049\000\050\000\051\000\052\000\053\000\049\000\
\050\000\051\000\052\000\053\000\023\000\126\000\023\000\023\000\
\130\000\030\000\023\000\030\000\030\000\133\000\134\000\030\000\
\023\000\036\000\147\000\143\000\144\000\030\000\148\000\149\000\
\150\000\023\000\023\000\151\000\023\000\023\000\030\000\030\000\
\152\000\030\000\030\000\006\000\038\000\007\000\063\000\064\000\
\036\000\023\000\023\000\023\000\023\000\023\000\030\000\030\000\
\030\000\030\000\030\000\040\000\086\000\041\000\128\000\000\000\
\040\000\043\000\000\000\000\000\000\000\000\000\043\000\044\000\
\000\000\114\000\000\000\000\000\044\000\000\000\000\000\043\000\
\045\000\046\000\000\000\047\000\048\000\044\000\055\000\055\000\
\055\000\000\000\055\000\000\000\000\000\055\000\000\000\000\000\
\049\000\050\000\051\000\052\000\053\000\049\000\050\000\051\000\
\052\000\053\000\000\000\000\000\000\000\055\000\049\000\050\000\
\051\000\052\000\053\000\041\000\041\000\041\000\041\000\000\000\
\041\000\000\000\000\000\041\000\041\000\041\000\041\000\041\000\
\000\000\000\000\000\000\000\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\005\000\006\000\007\000\008\000\
\009\000\010\000\011\000\012\000\013\000\000\000\015\000\005\000\
\006\000\007\000\008\000\009\000\010\000\011\000\012\000\013\000\
\014\000\015\000\061\000\000\000\061\000\061\000\000\000\061\000\
\000\000\000\000\061\000\061\000\061\000\061\000\061\000\000\000\
\000\000\000\000\000\000\061\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\070\000\000\000\000\000\000\000\000\000\
\084\000\000\000\000\000\085\000\072\000\073\000\074\000\075\000\
\000\000\000\000\000\000\000\000\076\000\077\000\078\000\079\000\
\080\000\081\000\082\000\083\000\070\000\000\000\000\000\000\000\
\000\000\084\000\000\000\000\000\132\000\072\000\073\000\074\000\
\075\000\000\000\000\000\000\000\000\000\076\000\077\000\078\000\
\079\000\080\000\081\000\082\000\083\000\070\000\000\000\000\000\
\000\000\000\000\145\000\000\000\000\000\120\000\072\000\073\000\
\074\000\075\000\000\000\000\000\000\000\000\000\076\000\077\000\
\078\000\079\000\080\000\081\000\082\000\083\000\070\000\071\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\072\000\
\073\000\074\000\075\000\000\000\000\000\000\000\000\000\076\000\
\077\000\078\000\079\000\080\000\081\000\082\000\083\000\070\000\
\000\000\000\000\000\000\000\000\112\000\000\000\000\000\000\000\
\072\000\073\000\074\000\075\000\000\000\000\000\000\000\000\000\
\076\000\077\000\078\000\079\000\080\000\081\000\082\000\083\000\
\070\000\000\000\000\000\000\000\000\000\116\000\000\000\000\000\
\000\000\072\000\073\000\074\000\075\000\000\000\000\000\000\000\
\000\000\076\000\077\000\078\000\079\000\080\000\081\000\082\000\
\083\000\070\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\120\000\072\000\073\000\074\000\075\000\000\000\000\000\
\000\000\000\000\076\000\077\000\078\000\079\000\080\000\081\000\
\082\000\083\000\070\000\000\000\125\000\000\000\000\000\000\000\
\000\000\000\000\000\000\072\000\073\000\074\000\075\000\000\000\
\000\000\000\000\000\000\076\000\077\000\078\000\079\000\080\000\
\081\000\082\000\083\000\070\000\000\000\000\000\131\000\000\000\
\000\000\000\000\000\000\000\000\072\000\073\000\074\000\075\000\
\000\000\000\000\000\000\000\000\076\000\077\000\078\000\079\000\
\080\000\081\000\082\000\083\000\070\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\136\000\072\000\073\000\074\000\
\075\000\000\000\000\000\000\000\000\000\076\000\077\000\078\000\
\079\000\080\000\081\000\082\000\083\000\070\000\000\000\000\000\
\000\000\000\000\146\000\000\000\000\000\000\000\072\000\073\000\
\074\000\075\000\000\000\000\000\000\000\070\000\076\000\077\000\
\078\000\079\000\080\000\081\000\082\000\083\000\072\000\073\000\
\074\000\075\000\000\000\000\000\000\000\000\000\076\000\077\000\
\078\000\079\000\080\000\081\000\082\000\083\000\056\000\056\000\
\056\000\000\000\056\000\000\000\000\000\056\000\056\000\056\000\
\056\000\056\000\000\000\000\000\000\000\000\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\056\000\057\000\057\000\
\057\000\000\000\057\000\000\000\000\000\057\000\057\000\057\000\
\057\000\057\000\000\000\000\000\000\000\000\000\057\000\057\000\
\057\000\057\000\057\000\057\000\057\000\057\000\046\000\046\000\
\046\000\000\000\046\000\000\000\000\000\046\000\046\000\046\000\
\046\000\046\000\000\000\000\000\000\000\000\000\046\000\046\000\
\046\000\046\000\046\000\046\000\046\000\046\000\047\000\047\000\
\047\000\000\000\047\000\000\000\000\000\047\000\047\000\047\000\
\047\000\047\000\000\000\000\000\000\000\000\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\044\000\044\000\
\044\000\000\000\044\000\000\000\000\000\044\000\044\000\044\000\
\000\000\000\000\000\000\000\000\000\000\000\000\044\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\045\000\045\000\
\045\000\000\000\045\000\000\000\000\000\045\000\045\000\045\000\
\000\000\000\000\000\000\000\000\000\000\000\000\045\000\045\000\
\045\000\045\000\045\000\045\000\045\000\045\000\050\000\050\000\
\050\000\000\000\050\000\000\000\000\000\050\000\051\000\051\000\
\051\000\000\000\051\000\000\000\000\000\051\000\050\000\050\000\
\050\000\050\000\050\000\050\000\050\000\050\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\052\000\052\000\
\052\000\000\000\052\000\000\000\000\000\052\000\053\000\053\000\
\053\000\000\000\053\000\000\000\000\000\053\000\052\000\052\000\
\052\000\052\000\052\000\052\000\052\000\052\000\053\000\053\000\
\053\000\053\000\053\000\053\000\053\000\053\000\070\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\072\000\
\073\000\074\000\075\000\000\000\000\000\000\000\000\000\076\000\
\077\000\078\000\079\000\080\000\081\000\082\000\048\000\048\000\
\048\000\000\000\048\000\000\000\000\000\048\000\049\000\049\000\
\049\000\000\000\049\000\000\000\000\000\049\000\048\000\048\000\
\000\000\000\000\000\000\000\000\048\000\048\000\049\000\049\000\
\070\000\000\000\000\000\000\000\049\000\049\000\000\000\000\000\
\000\000\072\000\073\000\074\000\075\000\000\000\070\000\000\000\
\000\000\076\000\077\000\078\000\079\000\080\000\081\000\072\000\
\073\000\074\000\075\000\137\000\000\000\000\000\140\000\141\000\
\000\000\078\000\079\000\080\000\081\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\153\000\
\154\000\155\000"

let yycheck = "\040\000\
\000\000\065\000\043\000\044\000\045\000\005\001\014\000\002\001\
\003\001\004\001\002\001\006\001\005\001\005\001\009\001\006\001\
\024\000\006\001\009\001\011\001\009\001\014\001\030\000\064\000\
\065\000\017\001\067\000\068\000\069\000\024\001\025\001\072\000\
\073\000\074\000\075\000\076\000\077\000\078\000\079\000\080\000\
\081\000\082\000\083\000\001\000\085\000\045\001\001\001\045\001\
\045\001\090\000\042\001\043\001\044\001\045\001\046\001\010\001\
\011\001\012\001\013\001\005\001\002\001\007\001\008\001\001\001\
\005\001\011\001\002\001\131\000\004\001\045\001\006\001\017\001\
\113\000\114\000\012\001\013\001\006\001\118\000\119\000\120\000\
\026\001\027\001\028\001\029\001\030\001\002\001\003\001\004\001\
\009\001\006\001\131\000\132\000\009\001\003\001\002\001\136\000\
\042\001\043\001\044\001\045\001\046\001\005\001\045\001\007\001\
\008\001\007\001\005\001\011\001\007\001\008\001\002\001\002\001\
\011\001\017\001\002\001\005\001\005\001\001\001\017\001\002\001\
\016\001\045\001\026\001\027\001\002\001\029\001\030\001\026\001\
\027\001\004\001\029\001\030\001\006\001\009\001\005\001\002\001\
\006\001\003\001\042\001\043\001\044\001\045\001\046\001\042\001\
\043\001\044\001\045\001\046\001\005\001\003\001\007\001\008\001\
\002\001\005\001\011\001\007\001\008\001\002\001\002\001\011\001\
\017\001\004\001\003\001\028\001\006\001\017\001\003\001\003\001\
\002\001\026\001\027\001\002\001\029\001\030\001\026\001\027\001\
\002\001\029\001\030\001\006\001\037\000\006\001\006\001\006\001\
\006\001\042\001\043\001\044\001\045\001\046\001\042\001\043\001\
\044\001\045\001\046\001\005\001\057\000\007\001\119\000\255\255\
\005\001\011\001\255\255\255\255\255\255\255\255\011\001\017\001\
\255\255\005\001\255\255\255\255\017\001\255\255\255\255\011\001\
\026\001\027\001\255\255\029\001\030\001\017\001\002\001\003\001\
\004\001\255\255\006\001\255\255\255\255\009\001\255\255\255\255\
\042\001\043\001\044\001\045\001\046\001\042\001\043\001\044\001\
\045\001\046\001\255\255\255\255\255\255\025\001\042\001\043\001\
\044\001\045\001\046\001\001\001\002\001\003\001\004\001\255\255\
\006\001\255\255\255\255\009\001\010\001\011\001\012\001\013\001\
\255\255\255\255\255\255\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\255\255\041\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\001\001\255\255\003\001\004\001\255\255\006\001\
\255\255\255\255\009\001\010\001\011\001\012\001\013\001\255\255\
\255\255\255\255\255\255\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\001\001\255\255\255\255\255\255\255\255\
\006\001\255\255\255\255\009\001\010\001\011\001\012\001\013\001\
\255\255\255\255\255\255\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\001\001\255\255\255\255\255\255\
\255\255\006\001\255\255\255\255\009\001\010\001\011\001\012\001\
\013\001\255\255\255\255\255\255\255\255\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\001\001\255\255\255\255\
\255\255\255\255\006\001\255\255\255\255\009\001\010\001\011\001\
\012\001\013\001\255\255\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\001\001\002\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\010\001\
\011\001\012\001\013\001\255\255\255\255\255\255\255\255\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\001\001\
\255\255\255\255\255\255\255\255\006\001\255\255\255\255\255\255\
\010\001\011\001\012\001\013\001\255\255\255\255\255\255\255\255\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\001\001\255\255\255\255\255\255\255\255\006\001\255\255\255\255\
\255\255\010\001\011\001\012\001\013\001\255\255\255\255\255\255\
\255\255\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\001\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\009\001\010\001\011\001\012\001\013\001\255\255\255\255\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\001\001\255\255\003\001\255\255\255\255\255\255\
\255\255\255\255\255\255\010\001\011\001\012\001\013\001\255\255\
\255\255\255\255\255\255\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\001\001\255\255\255\255\004\001\255\255\
\255\255\255\255\255\255\255\255\010\001\011\001\012\001\013\001\
\255\255\255\255\255\255\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\001\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\009\001\010\001\011\001\012\001\
\013\001\255\255\255\255\255\255\255\255\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\001\001\255\255\255\255\
\255\255\255\255\006\001\255\255\255\255\255\255\010\001\011\001\
\012\001\013\001\255\255\255\255\255\255\001\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\010\001\011\001\
\012\001\013\001\255\255\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\002\001\003\001\
\004\001\255\255\006\001\255\255\255\255\009\001\010\001\011\001\
\012\001\013\001\255\255\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\002\001\003\001\
\004\001\255\255\006\001\255\255\255\255\009\001\010\001\011\001\
\012\001\013\001\255\255\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\002\001\003\001\
\004\001\255\255\006\001\255\255\255\255\009\001\010\001\011\001\
\012\001\013\001\255\255\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\002\001\003\001\
\004\001\255\255\006\001\255\255\255\255\009\001\010\001\011\001\
\012\001\013\001\255\255\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\002\001\003\001\
\004\001\255\255\006\001\255\255\255\255\009\001\010\001\011\001\
\255\255\255\255\255\255\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\002\001\003\001\
\004\001\255\255\006\001\255\255\255\255\009\001\010\001\011\001\
\255\255\255\255\255\255\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\002\001\003\001\
\004\001\255\255\006\001\255\255\255\255\009\001\002\001\003\001\
\004\001\255\255\006\001\255\255\255\255\009\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\002\001\003\001\
\004\001\255\255\006\001\255\255\255\255\009\001\002\001\003\001\
\004\001\255\255\006\001\255\255\255\255\009\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\001\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\010\001\
\011\001\012\001\013\001\255\255\255\255\255\255\255\255\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\002\001\003\001\
\004\001\255\255\006\001\255\255\255\255\009\001\002\001\003\001\
\004\001\255\255\006\001\255\255\255\255\009\001\018\001\019\001\
\255\255\255\255\255\255\255\255\024\001\025\001\018\001\019\001\
\001\001\255\255\255\255\255\255\024\001\025\001\255\255\255\255\
\255\255\010\001\011\001\012\001\013\001\255\255\001\001\255\255\
\255\255\018\001\019\001\020\001\021\001\022\001\023\001\010\001\
\011\001\012\001\013\001\130\000\255\255\255\255\133\000\134\000\
\255\255\020\001\021\001\022\001\023\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\150\000\
\151\000\152\000"

let yynames_const = "\
  DOT\000\
  SEMI\000\
  COL\000\
  SEMICOL\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  PIXKEY\000\
  IN\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  AND\000\
  OR\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  BOOL\000\
  FLOAT\000\
  VOID\000\
  STRING\000\
  IMAGE\000\
  GRADIENT\000\
  ALBUM\000\
  ARR\000\
  PRESET\000\
  PIXEL\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  BLIT\000\
  STRLIT\000\
  ID\000\
  FLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 33 "parser.mly"
            ( _1 )
# 502 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 36 "parser.mly"
                 ( ([], [])               )
# 508 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 37 "parser.mly"
               ( ((_2 :: fst _1), snd _1) )
# 516 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 38 "parser.mly"
               ( (fst _1, (_2 :: snd _1)) )
# 524 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 12 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 11 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 9 : 'formals_opt) in
    let _11 = (Parsing.peek_val __caml_parser_env 3 : 'vdecl_list) in
    let _12 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_list) in
    Obj.repr(
# 42 "parser.mly"
     ( { typ = _2;
	 fname = _3;
	 formals = List.rev _5;
	 locals = List.rev _11;
	 body = List.rev _12 } )
# 539 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 49 "parser.mly"
                  ( [] )
# 545 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 50 "parser.mly"
                  ( _1 )
# 552 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 53 "parser.mly"
                             ( [(_1,_2)]     )
# 560 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 54 "parser.mly"
                             ( (_3,_4) :: _1 )
# 569 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 57 "parser.mly"
          ( Int   )
# 575 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 58 "parser.mly"
          ( Bool  )
# 581 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "parser.mly"
          ( Float )
# 587 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "parser.mly"
          ( Void  )
# 593 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "parser.mly"
           ( String )
# 599 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
           ( Image )
# 605 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "parser.mly"
             ( Gradient )
# 611 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "parser.mly"
          ( Album )
# 617 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 65 "parser.mly"
        ( Array )
# 623 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 66 "parser.mly"
          ( Pixel )
# 629 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 69 "parser.mly"
                     ( [] )
# 635 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 70 "parser.mly"
                     ( _2 :: _1 )
# 643 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 73 "parser.mly"
               ( (_1, _2) )
# 651 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "parser.mly"
                   ( [] )
# 657 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 77 "parser.mly"
                   ( _2 :: _1 )
# 665 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 80 "parser.mly"
                                            ( Expr _1               )
# 672 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 81 "parser.mly"
                                            ( Return _2             )
# 679 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 82 "parser.mly"
                                            ( Return Noexpr         )
# 685 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_list) in
    Obj.repr(
# 83 "parser.mly"
                                            ( Block(List.rev _3)    )
# 692 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 84 "parser.mly"
                                            ( Block(List.rev _3)    )
# 699 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 85 "parser.mly"
                                                     ( If(_3, _7, Block([])) )
# 707 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'stmt) in
    let _11 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 86 "parser.mly"
                                                             ( If(_3, _7, _11)        )
# 716 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'expr_opt) in
    let _11 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 88 "parser.mly"
                                            ( For(_3, _5, _7, _11)   )
# 726 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 89 "parser.mly"
                                                     ( While(_3, _7)         )
# 734 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 90 "parser.mly"
                                           ( EFor(_2, _4, _7)          )
# 743 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _11 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 91 "parser.mly"
                                                                    ( EEFor(_2, _5, _7, _11)          )
# 753 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 95 "parser.mly"
                  ( Noexpr )
# 759 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 96 "parser.mly"
                  ( _1 )
# 766 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 99 "parser.mly"
                     ( Literal(_1)            )
# 773 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 100 "parser.mly"
              ( Fliteral(_1)           )
# 780 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 101 "parser.mly"
                     ( BoolLit(_1)            )
# 787 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 102 "parser.mly"
                     ( Id(_1)                 )
# 794 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 103 "parser.mly"
                     ( StrLit(_1)             )
# 801 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 104 "parser.mly"
                                                        ( PixelLit(_2, _4, _6, _8) )
# 811 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "parser.mly"
                     ( Binop(_1, Add,   _3)   )
# 819 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                     ( Binop(_1, Sub,   _3)   )
# 827 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                     ( Binop(_1, Mult,  _3)   )
# 835 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                     ( Binop(_1, Div,   _3)   )
# 843 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "parser.mly"
                     ( Binop(_1, Equal, _3)   )
# 851 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                     ( Binop(_1, Neq,   _3)   )
# 859 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                     ( Binop(_1, Less,  _3)   )
# 867 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                     ( Binop(_1, Leq,   _3)   )
# 875 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                     ( Binop(_1, Greater, _3) )
# 883 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                     ( Binop(_1, Geq,   _3)   )
# 891 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                     ( Binop(_1, And,   _3)   )
# 899 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                     ( Binop(_1, Or,    _3)   )
# 907 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                         ( Unop(Neg, _2)      )
# 914 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                     ( Unop(Not, _2)          )
# 921 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                     ( Assign(_1, _3)         )
# 929 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 120 "parser.mly"
                                       ( Call(_3, _1 :: _5) )
# 938 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 121 "parser.mly"
                              ( Call(_1, _3)  )
# 946 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                       ( _2                   )
# 953 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                            ( _2                   )
# 960 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 126 "parser.mly"
                  ( [] )
# 966 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 127 "parser.mly"
               ( List.rev _1 )
# 973 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                            ( [_1] )
# 980 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                         ( _3 :: _1 )
# 988 "parser.ml"
               : 'args_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
