type token =
  | SEMI
  | COL
  | SEMICOL
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | DOT
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | AND
  | OR
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | BOOL
  | FLOAT
  | VOID
  | STRING
  | IMAGE
  | CAPTION
  | ALBUM
  | ARR
  | PRESET
  | PIXEL
  | RED
  | GREEN
  | BLUE
  | LITERAL of (int)
  | BLIT of (bool)
  | STRLIT of (string)
  | ID of (string)
  | FLIT of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
open Ast
# 56 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* COL *);
  259 (* SEMICOL *);
  260 (* LPAREN *);
  261 (* RPAREN *);
  262 (* LBRACE *);
  263 (* RBRACE *);
  264 (* COMMA *);
  265 (* PLUS *);
  266 (* MINUS *);
  267 (* TIMES *);
  268 (* DIVIDE *);
  269 (* ASSIGN *);
  270 (* DOT *);
  271 (* NOT *);
  272 (* EQ *);
  273 (* NEQ *);
  274 (* LT *);
  275 (* LEQ *);
  276 (* GT *);
  277 (* GEQ *);
  278 (* AND *);
  279 (* OR *);
  280 (* RETURN *);
  281 (* IF *);
  282 (* ELSE *);
  283 (* FOR *);
  284 (* WHILE *);
  285 (* INT *);
  286 (* BOOL *);
  287 (* FLOAT *);
  288 (* VOID *);
  289 (* STRING *);
  290 (* IMAGE *);
  291 (* CAPTION *);
  292 (* ALBUM *);
  293 (* ARR *);
  294 (* PRESET *);
  295 (* PIXEL *);
  296 (* RED *);
  297 (* GREEN *);
  298 (* BLUE *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  299 (* LITERAL *);
  300 (* BLIT *);
  301 (* STRLIT *);
  302 (* ID *);
  303 (* FLIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\006\000\006\000\009\000\
\009\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\007\000\007\000\003\000\008\000\008\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\013\000\012\000\012\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\014\000\014\000\
\015\000\015\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\014\000\000\000\001\000\002\000\
\004\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\000\000\002\000\003\000\000\000\002\000\
\002\000\003\000\002\000\005\000\007\000\011\000\011\000\007\000\
\007\000\000\000\001\000\001\000\001\000\001\000\001\000\001\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\005\000\005\000\005\000\003\000\001\000\
\002\000\002\000\003\000\004\000\003\000\004\000\000\000\001\000\
\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\067\000\000\000\010\000\011\000\012\000\013\000\
\014\000\015\000\016\000\017\000\018\000\000\000\019\000\001\000\
\003\000\004\000\000\000\000\000\000\000\000\000\022\000\000\000\
\000\000\000\000\000\000\008\000\000\000\000\000\000\000\000\000\
\000\000\009\000\000\000\020\000\000\000\021\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\036\000\038\000\040\000\000\000\037\000\024\000\000\000\056\000\
\000\000\023\000\005\000\057\000\058\000\027\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\025\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\026\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\043\000\044\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\062\000\000\000\000\000\
\000\000\000\000\000\000\060\000\000\000\000\000\000\000\000\000\
\000\000\028\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\033\000\000\000\000\000\
\032\000\000\000\000\000\000\000\000\000\000\000\000\000\030\000\
\031\000"

let yydgoto = "\002\000\
\003\000\004\000\017\000\018\000\019\000\026\000\037\000\039\000\
\027\000\054\000\055\000\064\000\056\000\092\000\093\000"

let yysindex = "\012\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\246\255\000\000\000\000\
\000\000\000\000\229\254\234\254\045\255\051\255\000\000\246\255\
\011\255\054\255\052\255\000\000\063\255\246\255\068\255\036\255\
\077\255\000\000\085\255\000\000\246\255\000\000\060\255\181\255\
\088\255\094\255\181\255\181\255\005\255\086\255\092\255\104\255\
\000\000\000\000\000\000\049\255\000\000\000\000\040\000\000\000\
\221\000\000\000\000\000\000\000\000\000\000\000\053\001\108\255\
\181\255\181\255\181\255\181\255\181\255\031\255\000\000\181\255\
\181\255\181\255\181\255\181\255\181\255\181\255\181\255\181\255\
\181\255\181\255\181\255\109\255\181\255\087\255\000\000\240\000\
\110\255\003\001\053\001\115\255\116\255\053\001\113\255\122\255\
\125\255\019\255\019\255\000\000\000\000\095\001\095\001\089\255\
\089\255\089\255\089\255\082\001\068\001\000\000\038\001\128\255\
\140\255\181\255\143\255\000\000\181\255\181\255\181\255\181\255\
\181\255\000\000\148\255\202\000\150\255\053\001\053\001\053\001\
\053\001\022\001\162\255\181\255\162\255\000\000\091\255\149\255\
\000\000\158\255\161\255\166\255\168\255\162\255\162\255\000\000\
\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\165\255\
\000\000\000\000\169\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\112\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\228\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\013\255\000\000\
\000\000\173\255\000\000\174\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\181\000\000\000\000\000\000\000\000\000\
\000\000\000\000\003\255\000\000\183\255\120\255\000\000\000\000\
\000\000\194\255\251\255\000\000\000\000\155\000\165\000\063\000\
\086\000\109\000\132\000\170\255\053\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\039\255\145\255\064\000\
\087\000\000\000\000\000\189\255\000\000\000\000\137\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000"

let yygindex = "\000\000\
\000\000\000\000\161\000\000\000\249\255\000\000\000\000\142\000\
\000\000\135\255\216\255\192\255\000\000\000\000\000\000"

let yytablesize = 628
let yytable = "\057\000\
\016\000\089\000\060\000\061\000\063\000\062\000\020\000\065\000\
\040\000\135\000\065\000\137\000\001\000\035\000\043\000\035\000\
\025\000\035\000\021\000\044\000\144\000\145\000\032\000\022\000\
\088\000\063\000\090\000\091\000\094\000\074\000\075\000\098\000\
\099\000\100\000\101\000\102\000\103\000\104\000\105\000\106\000\
\107\000\108\000\109\000\066\000\111\000\023\000\066\000\049\000\
\050\000\051\000\052\000\053\000\068\000\055\000\024\000\055\000\
\028\000\055\000\029\000\030\000\055\000\069\000\070\000\040\000\
\031\000\041\000\042\000\136\000\033\000\043\000\095\000\096\000\
\097\000\124\000\044\000\055\000\126\000\127\000\128\000\129\000\
\130\000\034\000\035\000\045\000\046\000\036\000\047\000\048\000\
\058\000\065\000\040\000\063\000\041\000\112\000\059\000\066\000\
\043\000\072\000\073\000\074\000\075\000\044\000\049\000\050\000\
\051\000\052\000\053\000\067\000\087\000\110\000\045\000\046\000\
\114\000\047\000\048\000\023\000\138\000\023\000\023\000\116\000\
\059\000\023\000\059\000\117\000\059\000\118\000\023\000\059\000\
\122\000\049\000\050\000\051\000\052\000\053\000\119\000\023\000\
\023\000\120\000\023\000\023\000\029\000\123\000\029\000\029\000\
\125\000\052\000\029\000\052\000\131\000\052\000\133\000\029\000\
\052\000\139\000\023\000\023\000\023\000\023\000\023\000\140\000\
\029\000\029\000\141\000\029\000\029\000\040\000\142\000\041\000\
\143\000\006\000\051\000\043\000\051\000\007\000\051\000\034\000\
\044\000\051\000\063\000\029\000\029\000\029\000\029\000\029\000\
\040\000\045\000\046\000\064\000\047\000\048\000\043\000\051\000\
\051\000\034\000\041\000\044\000\041\000\038\000\041\000\086\000\
\000\000\041\000\041\000\041\000\049\000\050\000\051\000\052\000\
\053\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\000\000\000\000\000\000\000\000\000\000\000\000\049\000\
\050\000\051\000\052\000\053\000\039\000\000\000\039\000\000\000\
\039\000\000\000\000\000\039\000\039\000\039\000\039\000\039\000\
\000\000\000\000\000\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\042\000\000\000\042\000\000\000\042\000\
\000\000\000\000\042\000\042\000\042\000\000\000\000\000\000\000\
\000\000\000\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\005\000\006\000\007\000\008\000\009\000\010\000\
\011\000\012\000\013\000\000\000\015\000\005\000\006\000\007\000\
\008\000\009\000\010\000\011\000\012\000\013\000\014\000\015\000\
\071\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\072\000\073\000\074\000\075\000\000\000\000\000\000\000\076\000\
\077\000\078\000\079\000\080\000\081\000\082\000\083\000\047\000\
\053\000\047\000\053\000\047\000\053\000\000\000\047\000\053\000\
\000\000\000\000\000\000\000\000\000\000\000\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\048\000\054\000\
\048\000\054\000\048\000\054\000\000\000\048\000\054\000\000\000\
\000\000\000\000\000\000\000\000\000\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\049\000\000\000\049\000\
\000\000\049\000\000\000\000\000\049\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\049\000\050\000\000\000\050\000\000\000\
\050\000\000\000\000\000\050\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\050\000\050\000\050\000\050\000\050\000\
\050\000\050\000\050\000\045\000\000\000\045\000\000\000\045\000\
\000\000\000\000\045\000\000\000\000\000\046\000\000\000\046\000\
\000\000\046\000\045\000\045\000\046\000\000\000\000\000\000\000\
\045\000\045\000\000\000\000\000\046\000\046\000\000\000\061\000\
\000\000\061\000\046\000\046\000\061\000\061\000\061\000\061\000\
\061\000\000\000\000\000\000\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\132\000\000\000\000\000\000\000\
\000\000\000\000\072\000\073\000\074\000\075\000\000\000\000\000\
\000\000\076\000\077\000\078\000\079\000\080\000\081\000\082\000\
\083\000\084\000\000\000\000\000\085\000\072\000\073\000\074\000\
\075\000\000\000\000\000\000\000\076\000\077\000\078\000\079\000\
\080\000\081\000\082\000\083\000\113\000\000\000\000\000\000\000\
\072\000\073\000\074\000\075\000\000\000\000\000\000\000\076\000\
\077\000\078\000\079\000\080\000\081\000\082\000\083\000\115\000\
\000\000\000\000\000\000\072\000\073\000\074\000\075\000\000\000\
\000\000\000\000\076\000\077\000\078\000\079\000\080\000\081\000\
\082\000\083\000\134\000\000\000\000\000\000\000\072\000\073\000\
\074\000\075\000\000\000\000\000\000\000\076\000\077\000\078\000\
\079\000\080\000\081\000\082\000\083\000\121\000\072\000\073\000\
\074\000\075\000\000\000\000\000\000\000\076\000\077\000\078\000\
\079\000\080\000\081\000\082\000\083\000\072\000\073\000\074\000\
\075\000\000\000\000\000\000\000\076\000\077\000\078\000\079\000\
\080\000\081\000\082\000\083\000\072\000\073\000\074\000\075\000\
\000\000\000\000\000\000\076\000\077\000\078\000\079\000\080\000\
\081\000\082\000\072\000\073\000\074\000\075\000\000\000\000\000\
\000\000\076\000\077\000\078\000\079\000\080\000\081\000\072\000\
\073\000\074\000\075\000\000\000\000\000\000\000\000\000\000\000\
\078\000\079\000\080\000\081\000"

let yycheck = "\040\000\
\000\000\066\000\043\000\044\000\045\000\001\001\014\000\005\001\
\004\001\131\000\008\001\133\000\001\000\001\001\010\001\003\001\
\024\000\005\001\046\001\015\001\142\000\143\000\030\000\046\001\
\065\000\066\000\067\000\068\000\069\000\011\001\012\001\072\000\
\073\000\074\000\075\000\076\000\077\000\078\000\079\000\080\000\
\081\000\082\000\083\000\005\001\085\000\001\001\008\001\043\001\
\044\001\045\001\046\001\047\001\004\001\001\001\004\001\003\001\
\046\001\005\001\005\001\008\001\008\001\013\001\014\001\004\001\
\002\001\006\001\007\001\132\000\001\001\010\001\040\001\041\001\
\042\001\114\000\015\001\023\001\117\000\118\000\119\000\120\000\
\121\000\046\001\006\001\024\001\025\001\001\001\027\001\028\001\
\001\001\004\001\004\001\132\000\006\001\007\001\001\001\004\001\
\010\001\009\001\010\001\011\001\012\001\015\001\043\001\044\001\
\045\001\046\001\047\001\004\001\001\001\001\001\024\001\025\001\
\003\001\027\001\028\001\004\001\026\001\006\001\007\001\005\001\
\001\001\010\001\003\001\008\001\005\001\013\001\015\001\008\001\
\001\001\043\001\044\001\045\001\046\001\047\001\013\001\024\001\
\025\001\013\001\027\001\028\001\004\001\002\001\006\001\007\001\
\002\001\001\001\010\001\003\001\001\001\005\001\001\001\015\001\
\008\001\005\001\043\001\044\001\045\001\046\001\047\001\002\001\
\024\001\025\001\002\001\027\001\028\001\004\001\001\001\006\001\
\001\001\005\001\001\001\010\001\003\001\005\001\005\001\003\001\
\015\001\008\001\005\001\043\001\044\001\045\001\046\001\047\001\
\004\001\024\001\025\001\005\001\027\001\028\001\010\001\022\001\
\023\001\005\001\001\001\015\001\003\001\037\000\005\001\058\000\
\255\255\008\001\009\001\010\001\043\001\044\001\045\001\046\001\
\047\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\255\255\255\255\255\255\255\255\255\255\255\255\043\001\
\044\001\045\001\046\001\047\001\001\001\255\255\003\001\255\255\
\005\001\255\255\255\255\008\001\009\001\010\001\011\001\012\001\
\255\255\255\255\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\001\001\255\255\003\001\255\255\005\001\
\255\255\255\255\008\001\009\001\010\001\255\255\255\255\255\255\
\255\255\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\255\255\039\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\001\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\009\001\010\001\011\001\012\001\255\255\255\255\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\001\001\
\001\001\003\001\003\001\005\001\005\001\255\255\008\001\008\001\
\255\255\255\255\255\255\255\255\255\255\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\001\001\001\001\
\003\001\003\001\005\001\005\001\255\255\008\001\008\001\255\255\
\255\255\255\255\255\255\255\255\255\255\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\001\001\255\255\003\001\
\255\255\005\001\255\255\255\255\008\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\001\001\255\255\003\001\255\255\
\005\001\255\255\255\255\008\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\001\001\255\255\003\001\255\255\005\001\
\255\255\255\255\008\001\255\255\255\255\001\001\255\255\003\001\
\255\255\005\001\016\001\017\001\008\001\255\255\255\255\255\255\
\022\001\023\001\255\255\255\255\016\001\017\001\255\255\003\001\
\255\255\005\001\022\001\023\001\008\001\009\001\010\001\011\001\
\012\001\255\255\255\255\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\003\001\255\255\255\255\255\255\
\255\255\255\255\009\001\010\001\011\001\012\001\255\255\255\255\
\255\255\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\005\001\255\255\255\255\008\001\009\001\010\001\011\001\
\012\001\255\255\255\255\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\005\001\255\255\255\255\255\255\
\009\001\010\001\011\001\012\001\255\255\255\255\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\005\001\
\255\255\255\255\255\255\009\001\010\001\011\001\012\001\255\255\
\255\255\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\005\001\255\255\255\255\255\255\009\001\010\001\
\011\001\012\001\255\255\255\255\255\255\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\008\001\009\001\010\001\
\011\001\012\001\255\255\255\255\255\255\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\009\001\010\001\011\001\
\012\001\255\255\255\255\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\009\001\010\001\011\001\012\001\
\255\255\255\255\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\009\001\010\001\011\001\012\001\255\255\255\255\
\255\255\016\001\017\001\018\001\019\001\020\001\021\001\009\001\
\010\001\011\001\012\001\255\255\255\255\255\255\255\255\255\255\
\018\001\019\001\020\001\021\001"

let yynames_const = "\
  SEMI\000\
  COL\000\
  SEMICOL\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  DOT\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  AND\000\
  OR\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  BOOL\000\
  FLOAT\000\
  VOID\000\
  STRING\000\
  IMAGE\000\
  CAPTION\000\
  ALBUM\000\
  ARR\000\
  PRESET\000\
  PIXEL\000\
  RED\000\
  GREEN\000\
  BLUE\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  BLIT\000\
  STRLIT\000\
  ID\000\
  FLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 33 "parser.mly"
            ( _1 )
# 428 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 36 "parser.mly"
                 ( ([], [])               )
# 434 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 37 "parser.mly"
               ( ((_2 :: fst _1), snd _1) )
# 442 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 38 "parser.mly"
               ( (fst _1, (_2 :: snd _1)) )
# 450 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 12 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 11 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 9 : 'formals_opt) in
    let _11 = (Parsing.peek_val __caml_parser_env 3 : 'vdecl_list) in
    let _12 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_list) in
    Obj.repr(
# 42 "parser.mly"
     ( { typ = _2;
	 fname = _3;
	 formals = List.rev _5;
	 locals = List.rev _11;
	 body = List.rev _12 } )
# 465 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 49 "parser.mly"
                  ( [] )
# 471 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 50 "parser.mly"
                  ( _1 )
# 478 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 53 "parser.mly"
                             ( [(_1,_2)]     )
# 486 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 54 "parser.mly"
                             ( (_3,_4) :: _1 )
# 495 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 57 "parser.mly"
          ( Int   )
# 501 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 58 "parser.mly"
          ( Bool  )
# 507 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "parser.mly"
          ( Float )
# 513 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "parser.mly"
          ( Void  )
# 519 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "parser.mly"
           ( String )
# 525 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
           ( Image )
# 531 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "parser.mly"
            ( Caption )
# 537 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "parser.mly"
          ( Album )
# 543 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 65 "parser.mly"
        ( Array )
# 549 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 66 "parser.mly"
          ( Pixel )
# 555 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 69 "parser.mly"
                     ( [] )
# 561 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 70 "parser.mly"
                     ( _2 :: _1 )
# 569 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 73 "parser.mly"
               ( (_1, _2) )
# 577 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "parser.mly"
                   ( [] )
# 583 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 77 "parser.mly"
                   ( _2 :: _1 )
# 591 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 80 "parser.mly"
                                            ( Expr _1               )
# 598 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 81 "parser.mly"
                                            ( Return _2             )
# 605 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 82 "parser.mly"
                                            ( Return Noexpr         )
# 611 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_list) in
    Obj.repr(
# 83 "parser.mly"
                                            ( Block(List.rev _3)    )
# 618 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 84 "parser.mly"
                                                     ( If(_3, _7, Block([])) )
# 626 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'stmt) in
    let _11 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 85 "parser.mly"
                                                             ( If(_3, _7, _11)        )
# 635 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'expr_opt) in
    let _11 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 87 "parser.mly"
                                            ( For(_3, _5, _7, _11)   )
# 645 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 88 "parser.mly"
                                                     ( While(_3, _7)         )
# 653 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 91 "parser.mly"
                                             ( PixelLit(_2, _4, _6) )
# 662 "parser.ml"
               : 'pixel_lit))
; (fun __caml_parser_env ->
    Obj.repr(
# 94 "parser.mly"
                  ( Noexpr )
# 668 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 95 "parser.mly"
                  ( _1 )
# 675 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 98 "parser.mly"
                     ( Literal(_1)            )
# 682 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 99 "parser.mly"
                     ( Fliteral(_1)           )
# 689 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 100 "parser.mly"
                     ( BoolLit(_1)            )
# 696 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 101 "parser.mly"
                     ( Id(_1)                 )
# 703 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 102 "parser.mly"
                     ( StrLit(_1)             )
# 710 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 103 "parser.mly"
                     ( Binop(_1, Add,   _3)   )
# 718 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 104 "parser.mly"
                     ( Binop(_1, Sub,   _3)   )
# 726 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "parser.mly"
                     ( Binop(_1, Mult,  _3)   )
# 734 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                     ( Binop(_1, Div,   _3)   )
# 742 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                     ( Binop(_1, Equal, _3)   )
# 750 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                     ( Binop(_1, Neq,   _3)   )
# 758 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "parser.mly"
                     ( Binop(_1, Less,  _3)   )
# 766 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                     ( Binop(_1, Leq,   _3)   )
# 774 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                     ( Binop(_1, Greater, _3) )
# 782 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                     ( Binop(_1, Geq,   _3)   )
# 790 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                     ( Binop(_1, And,   _3)   )
# 798 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                                 ( Setpval(_1, Red, _5) )
# 806 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                                 ( Setpval(_1, Green, _5) )
# 814 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                                 ( Setpval(_1, Blue, _5) )
# 822 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                     ( Binop(_1, Or,    _3)   )
# 830 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pixel_lit) in
    Obj.repr(
# 118 "parser.mly"
                                        ( _1 )
# 837 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                         ( Unop(Neg, _2)      )
# 844 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                     ( Unop(Not, _2)          )
# 851 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                     ( Assign(_1, _3)         )
# 859 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 122 "parser.mly"
                              ( Call(_1, _3)  )
# 867 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                       ( _2                   )
# 874 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                            ( _2                   )
# 881 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 127 "parser.mly"
                  ( [] )
# 887 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 128 "parser.mly"
               ( List.rev _1 )
# 894 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                            ( [_1] )
# 901 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                         ( _3 :: _1 )
# 909 "parser.ml"
               : 'args_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
